image: docker:19.03.12
services:
  - docker:19.03.12-dind
  - postgres:12.2-alpine

stages:
  - test
  - build
  - release
  - deploy

variables:
  # docker service
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  CONTAINER_BACKEND_TEST_IMAGE: $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
  CONTAINER_BACKEND_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/backend:latest
  CONTAINER_FRONTEND_TEST_IMAGE: $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
  CONTAINER_FRONTEND_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/frontend:latest
  # postgres service
  POSTGRES_SERVER: postgres
  POSTGRES_DB: $POSTGRES_DB
  POSTGRES_USER: $POSTGRES_USER
  POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  POSTGRES_HOST_AUTH_METHOD: trust
  # backend api variables
  PROJECT_NAME: YouTube Tag Analyser
  SERVER_NAME: 0.0.0.0:8000
  SERVER_HOST: http://0.0.0.0
  FIRST_SUPERUSER: example@example.com
  FIRST_SUPERUSER_PASSWORD: example
  # frontend ui
  VUE_APP_NAME: ytta

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# BACKEND API

test:backend:
  stage: test
  image: python:3.8
  before_script: []
  script:
    - cd backend
    - pip install -r requirements.txt
    - pip install -r dev_requirements.txt
    - ./test.sh
    - coverage xml
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    reports:
      junit: backend/report.xml
      cobertura: backend/coverage.xml

build:backend:
  stage: build
  needs: ["test:backend"]
  script:
    - cd backend
    - docker build --pull -t $CONTAINER_BACKEND_TEST_IMAGE .
    - docker push $CONTAINER_BACKEND_TEST_IMAGE

release:backend:
  stage: release
  needs: ["build:backend"]
  script:
    - cd backend
    - docker pull $CONTAINER_BACKEND_TEST_IMAGE
    - docker tag $CONTAINER_BACKEND_TEST_IMAGE $CONTAINER_BACKEND_RELEASE_IMAGE
    - docker push $CONTAINER_BACKEND_RELEASE_IMAGE
  # only:
  #   - main

deploy:backend:
  stage: deploy
  needs: ["release:backend"]
  before_script: []
  image:
     name: bitnami/kubectl:latest
     entrypoint: [""]
  environment:
    name: production-backend
    url: http://k8s-yttaapp-yttaappi-09ca915a8c-1517465418.eu-central-1.elb.amazonaws.com/
  script:
    - cd backend
    - kubectl config use-context youtube-tag-analyser/infrastructure-management:my-agent
    - kubectl -n ytta-app set image deployment ytta-app-server ytta-app=$CONTAINER_BACKEND_TEST_IMAGE
    - kubectl -n ytta-app rollout status deployment ytta-app-server
  # only:
  #   - main

# FRONTEND WEB APP

test:frontend:
  stage: test
  image: tiangolo/node-frontend:10
  before_script: []
  script:
    - cd frontend
    - npm install
    - npm run ci:unit
  coverage: '/Lines\s*:\s*(\d+.?\d*)%/'
  artifacts:
    when: always
    reports:
      junit: frontend/junit.xml
      cobertura: frontend/coverage/cobertura-coverage.xml

build:frontend:
  stage: build
  needs: ["test:frontend"]
  script:
    - cd frontend
    - docker build --pull -t $CONTAINER_FRONTEND_TEST_IMAGE .
    - docker push $CONTAINER_FRONTEND_TEST_IMAGE

release:frontend:
  stage: release
  needs: ["build:frontend"]
  script:
    - cd frontend
    - docker pull $CONTAINER_FRONTEND_TEST_IMAGE
    - docker tag $CONTAINER_FRONTEND_TEST_IMAGE $CONTAINER_FRONTEND_RELEASE_IMAGE
    - docker push $CONTAINER_FRONTEND_RELEASE_IMAGE
  # only:
  #   - main

deploy:frontend:
  stage: deploy
  needs: ["release:frontend"]
  before_script: []
  image:
     name: bitnami/kubectl:latest
     entrypoint: [""]
  environment:
    name: production-frontend
    url: http://TBA.amazonaws.com/
  script:
    - cd frontend
    - kubectl config use-context youtube-tag-analyser/infrastructure-management:my-agent
    - kubectl -n ytta-app set image deployment ytta-app-frontend ytta-app=$CONTAINER_FRONTEND_TEST_IMAGE
    - kubectl -n ytta-app rollout status deployment ytta-app-frontend
  # only:
  #   - main
